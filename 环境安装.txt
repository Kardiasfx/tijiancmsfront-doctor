1. 安装nodejs  nodejs中会包含npm包管理工具
2. 安装yarn    npm install -g yarn
3. 修改镜像
    //查看镜像源使用状态：
    npm get registry
    yarn config get registry 
    //全局切换镜像源：
    npm config set registry http://registry.npm.taobao.org
    yarn config set registry https://registry.npm.taobao.org
4. 安装Cli(搭建好的前端的项目结构)
    npm install -g @vue/cli
    # OR
    yarn global add @vue/cli  
5. 使用npm install可以安装项目所需要的依赖库  也可以使用 yarn来安装(速度快)
6. 启动服务器
    1. npm instll  2.npm run serve
    1. yarn        2. yarn serve

路径的问题： cd 表示进入到某个文件夹  cd 

@vitejs/plugin-vue requires vue (>=3.2.13) or @vue/compiler-sfc to be present in the dependency
tree.
将vue 升级到最新的可用版本为我解决了这个问题:)

如果您使用 Yarn：

yarn add vue@3.2.26
如果你使用 NPM：

npm i vue@3.2.26

set NODE_SKIP_PLATFORM_CHECK=1 跳过平台验证


export default { ... }: 这行代码导出了一个默认对象，这个对象定义了 Vue 组件的选项。这是在使用单文件组件（.vue 文件）时常见的做法。

setup() { ... }: setup 是 Vue 3 中引入的一个新的组件选项。它是一个函数，Vue 在处理组件时会调用这个函数。
setup 函数是 Composition API 的入口点，用于定义组件的响应式状态、计算属性、方法等。

const router = useRouter();: 这行代码通过 useRouter 钩子获取了当前的 Vue 路由器实例。
useRouter 是 Vue Router 4 中引入的一个 Composition API 钩子，用于在 setup 函数内访问路由器实例。

const state = reactive({ ... });: 这里创建了一个响应式的状态对象。reactive 是一个函数，它接收一个普通对象并返回该对象的响应式代理。
在这个例子中，传递给 reactive 的对象是空的，但你可以在其中定义你需要的状态属性。

return { ...toRefs(state), };: 在 setup 函数的末尾，我们返回一个对象。这个对象中的属性将可用于组件的模板中。
toRefs 函数用于将 reactive 对象中的每个属性转换为一个可以单独使用的响应式引用。这样，即使在 setup 函数外部，单个属性的响应性也能保持不变。

整体来看，这段代码定义了一个 Vue 3 组件，它利用 Composition API 来设置组件的逻辑和状态。
虽然这个示例很简单，但它展示了在 Vue 3 中如何使用 setup 函数和其他 Composition API 的特性来构建组件。


javascript部分代码

import { useRouter } from 'vue-router';
import { reactive, toRefs } from 'vue';

export default {
  setup() {
    const router = useRouter();

    // 在状态对象中添加用户名和密码
    const state = reactive({
      username: '',
      password: '',
    });

    // 登录方法
    const login = () => {
      // 这里只是打印出用户名和密码，实际应用中应该有更复杂的逻辑
      console.log(`Logging in with username: ${state.username} and password: ${state.password}`);
      // 模拟登录成功后的跳转
      router.push('/home');
    };

    // 返回响应式引用和登录方法
    return {
      ...toRefs(state),
      login,
    };
  },
};
在这个示例中，login 方法仅仅是打印出用户名和密码，并模拟跳转到 /home 路径。在实际应用中，你需要将用户名和密码发送到后端进行验证，并根据验证结果来决定是否跳转。

接下来是组件的模板部分，您可以在 .vue 文件的 <template> 标签内添加如下内容：

html代码

<template>
  <div>
    <input v-model="username" placeholder="Username" />
    <input v-model="password" type="password" placeholder="Password" />
    <button @click="login">Login</button>
  </div>
</template>
这里使用了 v-model 指令绑定了输入框的值到响应式状态中的 username 和 password。点击按钮时会调用 login 方法。